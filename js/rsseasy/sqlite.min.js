/// <reference path="jquery.min.js" />
/// <reference path="sqlitehelper.js" />
/// <reference path="rsseasy.min.js" />

function SQLite(tablename, fielditem) {
    this.customevent = "";
    this.params = {
        "adapter": "SQLite",
        "tablename": tablename,
        "fielditem": fielditem,
        "action": ""
    }
    this.init();
}
SQLite.prototype.init = function () {
    this.pagesize = 10;
    this.curpage = 1;
    $.extend(this.params, {
        "where": "",
        "whereargs": "",
        "fields": "",
        "orderby": "",
        "limit": "",
        "keyvalue": {}
    });
    return this;
}
SQLite.prototype.drop = function () {
    this.init();
    this.params.action = "drop";
    return this;
}
SQLite.prototype.dump = function () {
    this.init();
    this.params.action = "dump";
    return this;
}
SQLite.prototype.timestamp = function (key) {
    if (!key) {
        key = "shijian";
    }
    this.keyvalue(key, parseInt(new Date().getTime() / 1000));
    return this;
}
SQLite.prototype.keymyid = function () {
    this.keyvalue("myid", Storage.Get("myid"));
}
SQLite.prototype.keyvalue = function (key, value) {
    if (typeof key == "object") {
        $.extend(this.params.keyvalue, key);
    }
    else {
        this.params.keyvalue[key] = value;
    }
    return this;
}
SQLite.prototype.remove = function (keys) {
    var t = this;
    $.each(arguments, function (idx, val) {
        delete t.Params[val];
    });
}
SQLite.prototype.append = function () {
    this.params.action = "append";
    return this;
}
SQLite.prototype.update = function () {
    this.params.action = "update";
    return this;
}
SQLite.prototype.delete = function () {
    this.params.action = "delete";
    return this;
}
SQLite.prototype.select = function (fields) {
    this.init();
    this.params.fields = fields || "";
    return this;
}
SQLite.prototype.where = function (where, args) {
    this.params.where = where || "";
    this.params.whereargs = args || "";
    return this;
}
SQLite.prototype.orderby = function (orderby) {
    this.params.orderby = orderby;
    return this;
}
SQLite.prototype.query = function (orderby) {
    this.params.orderby = orderby || this.params.orderby || "";
    this.params.action = "query";
    this.submit();
}
SQLite.prototype.get_page_desc = function (key) {
    this.params.orderby = key + " desc";
    if (this.curpage < 1) {
        this.curpage = 1;
    }
    this.params.limit = (this.curpage - 1) * this.pagesize + "," + this.pagesize;
    this.params.action = "query";
    this.submit();
}
SQLite.prototype.get_first_rows = function () {
    this.params.action = "get_first_rows";
    this.submit();
}
SQLite.prototype.submit = function () {
    JsAdapter.Push($.extend({ "customevent": this.customevent }, this.params)).Submit();
}