/// <reference path="jquery.min.js" />
/// <reference path="sqlitehelper.js" />
/// <reference path="rsseasy.min.js" />

//使用浏览器调用打开
        var WebAdapter = {
            "Request": function (params) {
                new Ajax(params["url"]).getJson(function (data) {
                    JsAdapterCallBack(data);
                });
            },
            "GetContactsPhone": function () {
                JsAdapter.onGetContactsPhoneComplete({});
            },
            "SQLite": function (params) {
                var sqlite = new SqliteHelper(params);
                sqlite.action();
            },
            "Progress": function (params) {
                switch (params["action"]) {
                    case "hide":
                        RssWin.MaskLayer.close();
                        RssWin.LoadBox.close();
                        break;
                    default:
                        RssWin.MaskLayer.show();
                        RssWin.LoadBox.show(params["message"] || "加载中...");
                        break;
                }
            },
            "MusicPlay": function (params) {
                RssAudio.play(params["url"])
            },
            "TakePhotos": function (params) { },
            "GetVersion": function () {
                if (!RssOS.ispc) {
                    JsAdapter.onGetVersion({"code": "0", "name": "0"});
                }
            }
        }

var JsAdapter = {
    Params: {},
    Push: function (params) {
        JsAdapter.Params = params;
        return this;
    },
    onPageFinished: function () {

    },
    onHttpConnOpen: function ()  //在链接打开的时候
    {

    },
    ClearHistory: function () {  //清除历史缓存
        this.Push({"adapter": "ClearHistory"});
        return this;
    },
    onClearHistory: function () {
    },
    Print: function (params) {
        params["adapter"] = "Print";
        this.Push(params);
        return this;
    },
    onPrint: function (json) {

    },
    Close: function (params) {  //关闭
        params["adapter"] = "Close";
        this.Push(params);
        return this;
    },
    Share: function (params) {  //分享
        params["adapter"] = "Share";
        this.Push(params);
        return this;
    },
    onClose: function (params) {

    },
    Vibrator: function (params) {  //调用震动
        params["adapter"] = "Vibrator";
        this.Push(params);
        return this;
    },
    MusicPlay: function (params) {  //播放音乐：loop-循环播放，action(play|pause|stop|loop),url-需要播放的音频地址
        params["adapter"] = "MusicPlay";
        this.Push(params);
        return this;
    },
    onPlayReady: function () { },
    onPlayEnd: function () { },
    PdfReader: function (params) {  //Pdf阅读
        params["adapter"] = "PdfReader";
        this.Push(params);
        return this;
    },
    GetPackageSign: function () {  //获取包的签名信息
        this.Push({"adapter": "GetPackageSign"});
        return this;
    },
    onGetPackageSign: function (json) {
    },
    GetStatus: function () {
        this.Push({"adapter": "GetStatus"});
        return this;
    },
    onGetStatus: function (json) {

    },
    onResume: function (json) {
    },
    Progress: function (params) {
        params = params || {};
        params["adapter"] = "Progress";
        this.Push(params);
        return this;
    },
    onProgress: function (json) {
    },
    onComplete: function (json) {
    },
    GetContactsPhone: function ()  //逐条获取通讯录电话
    {
        this.Push({"adapter": "GetContactsPhone"});
        return this;
    },
    onGetContactsPhone: function (array)  //当获取通讯录
    {

    },
    onGetContactsPhoneComplete: function (json) { //当获取完通许录所有电话

    },
    onGetContactsPhoneFail: function (json) {
    },
    QRcodeMake: function (params) {  //生成二维码 {"data":"需要生成的二维码数据"}
        params["adapter"] = "QRcodeMake";
        this.Push(params);
        return this;
    },
    onQRcodeMake: function (json) { },
    QRcodeScan: function () {  //二维码扫描
        this.Push({"adapter": "QRcodeScan"});
        return this;
    },
    onQRcodeDecode: function (json) {  //二维码扫描后的数据
        return this;
    },
    SysSetting: function (params) {  //调用系统设置相关界面,参数action:apn|gps
        params["adapter"] = "SysSetting";
        this.Push(params);
        return this;
    },
    WebPing: function (url) {  //网站是否正常
        this.Push({"adapter": "WebPing", "url": url});
        return this;
    },
    onWebPing: function (json) {

    },
    GetGpsState: function () {  //获取GPS状态
        this.Push({"adapter": "GetGpsState"});
        return this;
    },
    onGetGpsState: function (json) {
    },
    GetNetState: function () {  //获取网络状态
        this.Push({"adapter": "GetNetState"});
        return this;
    },
    OpenGps: function () {
        this.Push({"adapter": "OpenGps"});
        return this;
    },
    onOpenGps: function (json) {
    },
    onGetNetState: function (json) {
    },
    onWiFiChange: function (json) {  //当WiFi发化变化的时候

    },
    GetAppList: function (params) {
        params["adapter"] = "GetAppList";
        this.Push(params);
        return this;
    },
    onGetAppListStart: function (json) {  //当开始获取APP列表开始

    },
    onGetAppList: function (json) {  //获取APP列表

    },
    onGetAppListEnd: function (json) {  //获取APP列表结束

    },
    Request: function (params) {
        params["adapter"] = "Request";
        this.Push(params);
        return this;
    },
    onRequest: function (params) {

    },
    PhotoCut: function (params)  //图片剪切
    {
        params["adapter"] = "PhotoCut";
        this.Push(params);
        return this;
    },
    onPhotoCut: function (json) {
    },
    GalleryList: function (params)  //获取手机图片列表
    {
        params["adapter"] = "GalleryList";
        this.Push(params);
        return this;
    },
    onGalleryListReady: function (params) {  //已准备好获取

    },
    onGalleryList: function (params) {
    },
    onGalleryListComplete: function (params) {

    },
    GallerySelect: function (params) {   //从相册中选择
        params["adapter"] = "GallerySelect";
        this.Push(params);
        return this;
    },
    onGallerySelect: function (params) //当相册文件被选择后
    {

    },
    TakePhotos: function (params)  //拍照
    {
        params["adapter"] = "TakePhotos";
        this.Push(params);
        return this;
    },
    onTakePhotos: function (json) {
    },
    onTakePhotosError: function (json) {
        alert(json["error"]);
    },
    DownloadApk: function (url) {
        this.Push({"adapter": "DownloadApk", "url": url});
        return this;
    },
    onMenuClick: function (params) {

    },
    ToastShow: function (message)  //
    {
        this.Push({"adapter": "ToastShow", "message": message});
        return this;
    },

    GetVersion: function () {
        this.Push({"adapter": "GetVersion"});
		// alert("启动3。。。");
        return this;
    },
    onGetVersion: function (params) {

    },
    MapMarkerPoint: function (params)  //在地图上显示点
    {
        params["adapter"] = "MapMarkerPoint";
        this.Push(params);
        return this;
    },
    MapSelectPoint: function (params)  //在地图上获取选定点的信息
    {
        params["adapter"] = "MapSelectPoint";
        this.Push(params);
        return this;
    },
    onMapSelectPoint: function (json) {
    },
    MapNavigation: function (params) {

    },
    LocationListener: function (params)//启动定位侦听
    {
        params["adapter"] = "LocationListener";
        this.Push(params);
        return this;
    },
    onLocationReceive: function (json)  //当成功收到定位信息时
    {
    },
    onLocationReceiveFail: function (json)  //当定位信息出错时
    {
    },
    PolygonContains: function (params) {   //判断指定的坐标点是否在多边型中
        params["adapter"] = "PolygonContains";
        this.Push(params);
        return this;
    },
    onLatLngContains: function (json) {  //在指定的坐标在形状中

    },
    ComputeDistance: function (params)  //测试两点之间的距离,p1lat,p1lng,p2lat,p2lng
    {
        params["adapter"] = "ComputeDistance";
        this.Push(params);
        return this;
    },
    onComputeDistance: function (json)  //距离结果
    {
    },
    onComputeDistanceFail: function (json)  //距离错误
    {
    },
    MapNavAutoMode: function (params) {//获取自动数据
        params["adapter"] = "MapNavAutoMode";
        this.Push(params);
        return this;
    },
    onMapNavAutoMode: function (json) {
    },
    onMapNavAutoModeStop: function (json) {
    },
    ClearCache: function () {
        this.Push({"adapter": "ClearCache"});
        return this;
    },
    onClearCache: function (json) {

    },
    onSQLite: function (params) {

    },
    StartUpApp: function (params) {
        params["adapter"] = "StartUpApp";
        this.Push(params);
        return this;
    },
    //debug:false
    Ready: function (option) {
        option["adapter"] = "Ready";
        this.Push(option);
        return this;
    },
    onReady: function (json) {
    },
    OpenWin: function (params) {
        params["adapter"] = "OpenWin";
        this.Push(params);
        return this;
    },
    Browser: function (url) {
        this.Push({ "adapter": "Browser", "url": url });
        return this;
    },
    Notity: function (params) {
        params["adapter"] = "Notity";
        this.Push(params);
        return this;
    },
    onNotity: function () {

    },
    Md5Sign: function (params) {
        params["adapter"] = "Md5Sign";
        this.Push(params);
        return this;
    },
    onMd5Sign: function (json) {

    },
    TaskTick: function (params) {
        params["adapter"] = "TaskTick";
        this.Push(params);
        return this;
    },
    onTaskTick: function () { },
    onNotityError: function (json) {
        alert(json["error"]);
    },
    onRollBack: function (params) {
    },
    onThreadQueueStart: function () { },
    onThreadQueueComplete: function () { },
    onSqlError: function (json) {
        console.info(json["error"]);
    },
    onSqlDrop: function (json) {
    },
    onSqlAppend: function (json) {
    },
    onSqlUpdate: function (json) {
    },
    onSqlDelete: function (json) {
    },
    onSqlQuery: function (json) {
    },
    onSqlGetFirstRows: function (json) {
    },
    Submit: function () {
        RssAppAdapter(this.Params);
    }
}

JsAdapter.onRollBack = function () {
    if (location.hash == "#loginpage") {
        location.href = RssApp.Hash;
    } else {
        history.back();
    }
}
JsAdapter.Ready({}).Submit();

$("[jsadapter]").click(function () {
    var t = $(this);
    var adapter = t.attr("jsadapter");
    if (!JsAdapter[adapter]) {
        alert(adapter + "指令不存在！");
        return;
    }
    var params = (t.attr("params") || "{}").toJson();
    JsAdapter[adapter](params).Submit();
});
$("[js-browser]").click(function (ev) {
    ev.preventDefault();
    ev.stopPropagation();
    JsAdapter.Browser($(this).attr("js-browser")).Submit();
});