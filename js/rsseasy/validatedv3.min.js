/// <reference path="jquery.min.js" />
/// <reference path="rsseasy.min.js" />

var ValidatedV3 = {
    label: "",
    key: "",
    value: "",
    dict: {},
    state: false,
    setlbl: function (label) {
        this.label = label;
        return this;
    },
    setdict: function (dict) {
        this.dict = dict;
        return this;
    },
    setform: function (id) {
        var t = this;
        $.each($("#" + id).serializeArray(), function (key, val) {
            t.dict[val["name"]] = val["value"];
        });
        return this;
    },
    parse: function (val) {
        this.value = val.constructor != String || this.dict[val] === undefined ? val : this.dict[val];
        return this.value;
    },
    verify: function (val, pattern, rsscode) {
        this.parse(val);
        this.value = this.value + "";
        this.state = this.value && this.value.match(pattern);
        if (rsscode) {
            this.throwex(rsscode);
        }
        return this;
    },
    throwex: function (rsscode, msg) {
        if (!this.state) {
            throw msg || rsscode;
        }
    },
    isNumber: function (val, msg) {
        this.verify(this.parse(val), "^-?\\d{1,9}(?:\\.?\\d{1,9})?$", "212");
        this.throwex("212", msg);
        return this;
    },
    isEmpty: function (val, msg) {
        val = this.parse(val);
        this.state = val == null || val == "";
        this.throwex("116", msg);
        return this;
    },
    isNotEmpty: function (val, msg) {
        val = this.parse(val);
        this.state = val && val.length > 0;
        this.throwex("200", msg);
        return this;
    },
    isZero: function (val, msg) {
        val = this.parse(val);
        this.state = val && val.match("^0$");
        return this;
    },
    isEqual: function (val1, val2, msg) {
        val1 = this.dict[val1] || val1;
        val2 = this.dict[val2] || val2;
        this.state = val1 == val2;
        this.throwex("116", msg);
        return this;
    },
    isNotEqual: function (val1, val2, msg) {
        val1 = this.dict[val1] || val1;
        val2 = this.dict[val2] || val2;
        this.state = val1 != val2;
        this.throwex("117", msg);
        return this;
    },
    isNotEqualZero: function (val, msg) {
        val = this.parse(val);
        this.state = parseInt(val) !== 0;
        this.throwex("201", msg);
        return this;
    },
    isRange: function (val, min, max) {
        val = this.parse(val);
        val = parseFloat(val);
        this.state = val > min && val < max;
        return this;
    },
    isEmail: function (val, msg) {
        this.verify(val, /^([\w-])+@([\w-])+(.[\w-])+/, "209", msg);
        return this;
    },
    isMobphone: function (val, msg) {
        this.verify(val, /^1\d{10}$/, "101", msg);
        return this;
    },
    isPhone: function (val, msg) {
        this.verify(val, /^\d{3,4}-?\d{7,8}/, "207", msg);
        return this;
    },
    isMoney: function (val, msg) {
        this.verify(val, /\d{1,15}(?:\.\d{1,4})?/, "202", msg);
        return this;
    },
    isChinese: function (val, msg) {
        this.verify(val, /^[\u4E00-\u9FA5]+$/, "208", msg);
        return this;
    },
    isDateTime: function (val, msg) {
        this.verify(val, /^\d{4}.\d{2}.\d{2}(?:\s\d{2}:\d{2}:\d{2})?$/, "205", msg);
        return this;
    },
    isTime: function (val, msg) {
        this.verify(val, /^\d{2}:\d{2}:\d{2}$/, "206", msg);
        return this;
    },
    isIdCard: function (val, msg) {
        this.verify(val, /^\d{17}[Xx]$/, "204", msg);
        return this;
    },
    isBankCard: function (val, msg) {
        this.verify(val, /^\d{12,19}$/, "203", msg);
        return this;
    },
    isMyID: function (val, msg) {
        this.verify(val, /^\d+$/, "997", msg);
        return this;
    },
    isPwd: function (val, msg) {
        this.verify(val, /^.{6,}$/, "102", msg);
        return this;
    },
    isSmsCode: function (val, msg) {
        this.verify(val, /^\d{4,6}$/, "120", msg);
        return this;
    },
    isImgCode: function (val, msg) {
        this.verify(val, /^\d{4,6}$/, "123", msg);
        return this;
    },
    isTitle: function (val, msg) {
        this.verify(val, /^.{2,25}$/, "309", msg);
        return this;
    },
    isMatter: function (val, msg) {
        this.verify(val, /^.{5,}$/, "310", msg);
        return this;
    },
    isRelationId: function (val, msg) {
        this.verify(val, /^\d+$/, "223", msg);
        return this;
    }
}